[[setup]]
== Set up the Agent

Follow these steps to start reporting your Android application's performance to Elastic APM:

1. <<gradle-setup>>.
2. <<manual-setup>>.
3. <<compile-and-run>>.
4. <<whats-next>>

[float]
[[gradle-setup]]
=== Set up Gradle

[float]
[[gradle-requirements]]
==== Requirements

|===
|Requirement |Minimum version

|Android Gradle plugin
|7.4.0

|Android API level
|24

|===

[float]
[[minsdk-24-support]]
==== For projects using minSdkVersion < 26

Due to Android's limited support for Java 8 features on devices with an API level < 26, or in other words, older than Android 8.0, you must add https://developer.android.com/studio/write/java8-support#library-desugaring[Java 8+ desugaring support] to apps with a `minSdkVersion` less than 26.
If you don't, your app can crash when running on devices using Android OS versions older than 8.0. This is because the https://github.com/open-telemetry/opentelemetry-java[OpenTelemetry Java SDK], which this SDK is built upon, uses Java 8 features.

You can skip this step if your `minSdkVersion` is 26 or higher.

[float]
[[adding-gradle-plugin]]
==== Add the Elastic Agent Gradle plugin

To automatically instrument <<supported-technologies,Supported Technologies>>, add the https://plugins.gradle.org/plugin/co.elastic.apm.android[Elastic APM agent plugin] to your application's `build.gradle` file as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    id "com.android.application"
    id "co.elastic.apm.android" version "[latest_version]" <1>
}
----

<1> The Elastic plugin declaration must be added below the Android app plugin declaration (`com.android.application`) and below the Kotlin plugin declaration (if used).

After adding the agent plugin, configure it.
A minimal configuration sets the Elastic APM Server endpoint as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    //...
    id "co.elastic.apm.android" version "[latest_version]" <1>
}

elasticApm {
    // Minimal configuration
    serverUrl = "https://your.elastic.server"

    // Optional
    serviceName = "your app name" <2>
    serviceVersion = "0.0.0" <3>
    apiKey = "your server api key" <4>
    secretToken = "your server auth token" <5>
}
----

<1> You can find the latest version in the https://plugins.gradle.org/plugin/co.elastic.apm.android[Gradle plugin portal].
<2> Defaults to your `android.defaultConfig.applicationId` value.
<3> Defaults to your `android.defaultConfig.versionName` value.
<4> Defaults to null.
More info on API Keys {ref}/security-api-create-api-key.html[here].
<5> Defaults to null.

NOTE: When both `secretToken` and `apiKey` are provided, apiKey has priority and secretToken is ignored.

[float]
[[application-setup]]
==== Set up your application

After syncing your project with the Gradle changes above, the Elastic APM agent needs to be initialized within your https://developer.android.com/reference/android/app/Application[Application class].
This example shows the simplest way to configure the agent:

[source,java]
----
// Your Application class

class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        ElasticApmAgent.initialize(this); <1>
    }
}
----

<1> Initialize the Elastic APM agent once.

[float]
[[manual-setup]]
=== (Optional) Manual set up

If you can't add the Elastic Agent Gradle plugin to your application as shown above, complete the following steps to set up the Elastic SDK manually.

[float]
[[gradle-dependencies]]
==== Add the SDK dependency

Add the https://central.sonatype.com/artifact/co.elastic.apm/android-sdk[Elastic APM agent SDK] to your application's `build.gradle` file as shown below:

[source,groovy]
----
// Android app's build.gradle file
dependencies {
    implementation "co.elastic.apm:android-sdk:[latest_version]" <1>
}
----

<1> You can find the latest version https://central.sonatype.com/artifact/co.elastic.apm/android-sdk[here].

[float]
[[manual-configuration]]
==== Configure your app's info and connectivity parameters

- Set your app name, version, and environment name, as explained <<app-id-configuration, here>>.
- Set your server connectivity parameters, as explained <<app-server-connectivity, here>>.

NOTE: Without the Gradle plugin, the Elastic SDK won't be able to provide automatic instrumentations for its <<supported-technologies>>.

[float]
[[compile-and-run]]
=== Compile and run

All that's left is to compile and run your application.
That's it!

[float]
[[whats-next]]
=== What's next?

After initializing the agent (by using the gradle plugin), your application will automatically create traces for all OkHttp network requests (including those created by tools that make use of OkHttp, like Retrofit) and all https://developer.android.com/reference/android/app/Activity[Activity] and https://developer.android.com/reference/androidx/fragment/app/Fragment[Fragment] starting methods.

Apart from the automatic instrumentation helped by the Gradle plugin, you'll get automatic crash reports when an unexpected error occurs in your app, regardless of whether the Gradle plugin is available or not.

All of these events will contain a "Session ID" that links related events togetherâ€”allowing you to make sense of and diagnose any issues that arise.
Head to the **APM app in {kib}** to start exploring your data.

If you need to customize the Elastic APM agent to your project's needs, see <<configuration,configuration>>.
If you need to create your own custom transactions, see <<manual-instrumentation, manual instrumentation>>.

