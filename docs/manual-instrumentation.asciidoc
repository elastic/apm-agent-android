[[manual-instrumentation]]
== Manual instrumentation

You can create your custom spans, metrics, and logs, via the
https://opentelemetry.io/docs/languages/java/api/#opentelemetry-api[OpenTelemetry
SDK APIs], which you can find in the
https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-api/latest/io/opentelemetry/api/OpenTelemetry.html[OpenTelemetry]
object provided by the agent via its `getOpenTelemetry()` method.
Alternatively, for common operations, you might be able to take
advantage of the <<convenience-extensions,convenience agent extensions>> to create telemetry in a less verbose way.

[discrete]
[[opentelemetry-apis]]
=== OpenTelemetry APIs

After completing the xref:/reference/getting-started.asciidoc[setup] process,
the agent will have configured an
https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-api/latest/io/opentelemetry/api/OpenTelemetry.html[OpenTelemetry]
object for you, which is available via its `getOpenTelemetry()` method.
Here's an example of how to create telemetry with it.

[source,kotlin]
----
fun myMethod() {
    val agent: ElasticApmAgent

    // Span example
    val tracer = agent.getOpenTelemetry().getTracer("my-tracer-scope")
    val span = tracer.spanBuilder("spanName").startSpan()
    // ...
    span.end()

    // Metric example
    val counter = agent.getOpenTelemetry().meterBuilder("meterScope").build().counterBuilder("myCounter").build()
    counter.add(1)

    // Logs example
    val logger = agent.getOpenTelemetry().logsBridge["logScope"]
    logger.logRecordBuilder().setBody("Log body").emit()
}
----

For more details on creating signals using the OpenTelemetry APIs, refer
to the following pages:

* https://opentelemetry.io/docs/languages/java/api/#span[Manually create
*spans*].
* https://opentelemetry.io/docs/languages/java/api/#meter[Manually
create *metrics*].
* https://opentelemetry.io/docs/languages/java/api/#logger[Manually
create *logs*].

[discrete]
[[convenience-extensions]]
=== Convenience extensions

For common use cases, in regards to spans and logs creation, the agent
provides a couple of Kotlin extension methods to allow you to create
telemetry in a less verbose way.

[NOTE]
====
The convenience methods make use of the same
<<opentelemetry-apis,OpenTelemetry APIs>> internally to create
telemetry. So they are not the only way to create the following signals,
they are only making them more straightforward to create.
====

[discrete]
==== Spans

[source,kotlin]
----

fun myMethod() {
    val agent: ElasticApmAgent

    agent.span("spanName") { // <1>
        // The span body.
    }
}
----

[arabic]
. The span name and its body are the only mandatory parameters from this
method. However, there are other optional parameters (such as one to set
custom `attributes`) that you can provide if needed. Take a look at the
https://github.com/elastic/apm-agent-android/blob/main/agent-sdk/src/main/java/co/elastic/otel/android/extensions/ElasticOtelAgentExtensions.kt[method
definition] to find out more.

[discrete]
==== Logs

[source,kotlin]
----

fun myMethod() {
    val agent: ElasticApmAgent

    agent.log("My log body") // <1>
}
----

[arabic]
. The log record body is the only mandatory parameter from this method.
However, there are other optional parameters (such as one to set custom
`attributes`), that you can provide if needed. Take a look at the
https://github.com/elastic/apm-agent-android/blob/main/agent-sdk/src/main/java/co/elastic/otel/android/extensions/ElasticOtelAgentExtensions.kt[method
definition] to find out more.
