[[setup]]
== Set up the Agent

Follow these steps to start reporting your Android application's performance to Elastic APM:

1. <<gradle-setup>>.
2. <<application-setup>>.
3. <<compile-and-run>>.
4. <<whats-next>>.

[float]
[[gradle-setup]]
=== Set up Gradle

First, add the https://central.sonatype.com/artifact/co.elastic.apm/android-sdk[Elastic APM agent SDK] to your application's `build.gradle` file as shown below:

[source,groovy]
----
// Android app's build.gradle file
dependencies {
    implementation "co.elastic.apm:android-sdk:[latest_version]" <1>
}
----

<1> You can find the latest version https://central.sonatype.com/artifact/co.elastic.apm/android-sdk[here].

[float]
[[minsdk-24-support]]
==== For projects using minSdk version < 26

Due to Android's limited support for Java 8 features on devices with API level < 26, or in other words, older than Android 8.0, you must add https://developer.android.com/studio/write/java8-support#library-desugaring[Java 8+ desugaring support] to apps with a minSdk version lower than 26.
If you don't, your app can crash when running on devices using Android OS versions older than 8.0. This is because the https://github.com/open-telemetry/opentelemetry-java[OpenTelemetry Java SDK], which this SDK is built upon, uses Java 8 features.

If your minSdk is 26 or higher, you can skip this step.

[float]
[[application-setup]]
=== Set up your application

After syncing your project with the Gradle changes above, the Elastic APM agent needs to be configured and initialized within your https://developer.android.com/reference/android/app/Application[Application class].
This example shows the simplest way to configure the agent:

[source,java]
----
// Your Application class

class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        String apmServerUrl = "https://my-apm-server";
        Connectivity myConnectivityConfig = Connectivity.simple(apmServerUrl); <1>
//        Connectivity myConnectivityConfig = Connectivity.withApiKey(apmServerUrl, "my_api_key"); <2>
//        Connectivity myConnectivityConfig = Connectivity.withSecretToken(apmServerUrl, "my_secret_token"); <3>
        ElasticApmAgent.initialize(this, myConnectivityConfig); <4>

        // Optionally if you also define a custom configuration:
        // ElasticApmAgent.initialize(this, ElasticApmConfiguration.builder().build(), myConnectivityConfig);
    }
}
----

<1> Connects to an APM server that requires no authentication.
<2> Connects to an APM server that requires an https://www.elastic.co/guide/en/apm/guide/current/api-key.html[API KEY] for authentication.
<3> Connects to an APM server that requires a https://www.elastic.co/guide/en/apm/guide/current/secret-token.html[SECRET TOKEN] for authentication.
<4> Make sure to initialize the Elastic APM agent only once.

The values related to your app's identification such as https://opentelemetry.io/docs/specs/semconv/resource/#service[service.name], https://opentelemetry.io/docs/specs/semconv/resource/#service[service.version] and https://opentelemetry.io/docs/specs/semconv/resource/deployment-environment/[deployment.environment] can be configured by following <<app-id-configuration, these instructions>>.

[float]
[[compile-and-run]]
=== Compile and run

All that's left is to compile and run your application.
That's it!

[float]
[[whats-next]]
=== What's next?

After initializing the agent, your application will:

- Create traces for all https://developer.android.com/reference/android/app/Activity[Activity] and https://developer.android.com/reference/androidx/fragment/app/Fragment[Fragment] classes' starting methods.
- Generate crash reports when an unexpected error occurs in your app.
- Send all your manually created traces, metrics and logs to the configured APM Server containing all https://github.com/elastic/apm/tree/main/specs/agents/mobile[these attributes].

You can also apply any of the automatic instrumentations https://github.com/open-telemetry/opentelemetry-android/tree/main/auto-instrumentation[available here].

All of these events will contain a "Session ID" that links related events togetherâ€”allowing you to make sense of and diagnose any issues that arise.
Head to the **APM app in {kib}** to start exploring your data.

If you need to customize the Elastic APM agent to your project's needs, see <<configuration,configuration>>.
If you need to create your own custom transactions, see <<manual-instrumentation, manual instrumentation>>.

