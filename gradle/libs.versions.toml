[versions]
opentelemetry = "1.48.0"
opentelemetry-contrib = "1.43.0-alpha"
byteBuddy = "1.17.5"
kotlin = "2.1.20"
android = "8.9.1"
autoService = "1.1.1"

[libraries]
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "opentelemetry" }
stagemonitor-configuration = "org.stagemonitor:stagemonitor-configuration:0.89.1"
androidx-annotations = "androidx.annotation:annotation:1.9.1"
androidx-core = "androidx.core:core:1.15.0"
dsl-json = "com.dslplatform:dsl-json-java8:1.10.0"
slf4j-api = "org.slf4j:slf4j-api:2.0.17"
byteBuddy = { module = "net.bytebuddy:byte-buddy", version.ref = "byteBuddy" }
opentelemetry-semconv = "io.opentelemetry.semconv:opentelemetry-semconv:1.31.0"
opentelemetry-semconv-incubating = "io.opentelemetry.semconv:opentelemetry-semconv-incubating:1.30.0-alpha"
opentelemetry-diskBuffering = { module = "io.opentelemetry.contrib:opentelemetry-disk-buffering", version.ref = "opentelemetry-contrib" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "opentelemetry" }

#Test tools
junit4 = "junit:junit:4.13.2"
junit-bom = "org.junit:junit-bom:5.12.1"
junit5-vintage = { module = "org.junit.vintage:junit-vintage-engine" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit-launcher = { module = "org.junit.platform:junit-platform-launcher" }
junit-engine = { module = "org.junit.jupiter:junit-jupiter-engine" }
opentelemetry-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing", version.ref = "opentelemetry" }
robolectric = "org.robolectric:robolectric:4.14.1"
assertj = "org.assertj:assertj-core:3.27.3"
mockk = "io.mockk:mockk:1.13.17"
awaitility = "org.awaitility:awaitility-kotlin:4.3.0"
wireMock = "org.wiremock:wiremock:3.12.1"

#Compilation tools
android-plugin = { module = "com.android.tools.build:gradle", version.ref = "android" }
apache-commons-text = "org.apache.commons:commons-text:1.13.0"
commons-io = "commons-io:commons-io:2.18.0"
spotless-plugin = "com.diffplug.spotless:spotless-plugin-gradle:7.0.2"
dokka = "org.jetbrains.dokka:dokka-gradle-plugin:1.9.20"
nexus-publish-plugin = "io.github.gradle-nexus:publish-plugin:2.0.0"
gradle-publish-plugin = "com.gradle.publish:plugin-publish-plugin:1.3.1"
gradle-shadow-plugin = "gradle.plugin.com.github.johnrengelman:shadow:8.0.0"
byteBuddy-plugin = { module = "net.bytebuddy:byte-buddy-gradle-plugin", version.ref = "byteBuddy" }
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
autoService-annotations = { module = "com.google.auto.service:auto-service-annotations", version.ref = "autoService" }
autoService-compiler = { module = "com.google.auto.service:auto-service", version.ref = "autoService" }
buildconfig-plugin = "com.github.gmazzo.buildconfig:com.github.gmazzo.buildconfig.gradle.plugin:5.6.2"
animalsniffer-plugin = "ru.vyarus:gradle-animalsniffer-plugin:2.0.0"
kotlin-binaryCompatibility = "org.jetbrains.kotlinx.binary-compatibility-validator:org.jetbrains.kotlinx.binary-compatibility-validator.gradle.plugin:0.17.0"
coreLib = "com.android.tools:desugar_jdk_libs:2.1.5"
mavenModel = "org.apache.maven:maven-model:3.9.9"

[bundles]
mocking = ["mockk"]
junit = ["junit4", "junit-jupiter", "junit-launcher", "junit-engine", "junit5-vintage", ]
opentelemetry-semconv = ["opentelemetry-semconv", "opentelemetry-semconv-incubating"]

[plugins]
androidApp = { id = "com.android.application", version.ref = "android" }
androidLib = { id = "com.android.library", version.ref = "android" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
