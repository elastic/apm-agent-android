== Configuration ++[++configuration++]++

This page includes a comprehensive list of all the configurable
parameters available for the agent, including those you can set during
initialization and those you can adjust dynamically afterward.

*Just getting started?* Start with link:getting-started.md[Getting
started].

=== Initialization configuration

Available from the Elastic agent builder shown in
link:getting-started.md#agent-setup[Agent setup], the following are its
available parameters.

==== Application info

Providing your application name, version, and environment:

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            .setServiceName("My app name") // <1>
            .setServiceVersion("1.0.0") // <2>
            .setDeploymentEnvironment("prod") // <3>
            // ...
            .build()
    }
}
----

[arabic]
. This will be the name used by Kibana when listing your application on
the
https://www.elastic.co/guide/en/observability/current/apm-services.html[Services]
page. Defaults to `unknown`. See
link:faq.md#why-does-my-app-have-to-be-referred-to-as-service[why your
app is referred to as a "service"].
. Your app's version name. Defaults to the version provided
https://developer.android.com/reference/android/content/pm/PackageInfo#versionName[here].
. Typically your app's build type, flavor, backend environment, or maybe
a combination of these. Any helpful distinction for you to better
analyze your app's data later in Kibana.

==== Export connectivity

Configuring where your app's telemetry will be exported.

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .setExportUrl("https://my-elastic-apm-collector.endpoint") // <1>
            .setExportAuthentication(Authentication.ApiKey("my-api-key")) // <2>
            .setExportProtocol(ExportProtocol.HTTP) // <3>
            .build()
    }
}
----

[arabic]
. Your endpoint URL. If you don't have one yet, check out
link:how-tos.md#how-to-get-my-elastic-stack-export-endpoint[how to find
it].
. Your authentication method. You can use either an
https://www.elastic.co/guide/en/observability/current/apm-api-key.html[API
Key], a
https://www.elastic.co/guide/en/observability/current/apm-secret-token.html[Secret
token], or none; defaults to `None`. API Keys are the recommended
method, if you don't have one yet, check out
link:how-tos.md#how-to-create-an-api-key[how to create one].
. The protocol used to communicate with your endpoint. It can be either
`HTTP` or `gRPC`. Defaults to `HTTP`.

[TIP]
====
If you'd like to provide these values from outside of your code, using
an environment variable or a properties file for example, refer to
link:../how-tos.md#how-to-provide-config-values-from-outside-of-my-code[Provide
config values outside of your code].
====

==== Intercepting export request headers

You can provide an interceptor for the signals' export request headers,
where you can read/modify them if needed.

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .setExportHeadersInterceptor(interceptor)
            .build()
    }
}
----

==== Intercepting attributes

You can provide global interceptors for all spans and logs
https://opentelemetry.io/docs/specs/otel/common/#attribute[attributes],
which will be executed on every span or log creation, where you can
read/modify them if needed.

This is useful for setting dynamic global attributes. If you'd like to
set static global attributes (which are also applied to metrics) take a
look at link:#intercepting-resources[intercepting resources].

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .addSpanAttributesInterceptor(interceptor)
            .addLogRecordAttributesInterceptor(interceptor)
            .build()
    }
}
----

==== Intercepting resources

The agent creates a
https://opentelemetry.io/docs/specs/otel/overview/#resources[resource]
for your signals, which is essentially a set of static global
attributes. These attributes help Kibana properly display your
application's data.

You can intercept these resources and read/modify them as shown below.

[NOTE]
====
The resource interceptor is only applied during initialization, as this
is the only time where resource attributes can be modified. If you'd
like to set _dynamic_ global attributes instead, take a look at
link:#intercepting-attributes[intercepting attributes].
====

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .setResourceInterceptor(interceptor)
            .build()
    }
}
----

==== Intercepting exporters

The agent configures exporters for each signal
(https://opentelemetry.io/docs/languages/java/sdk/#spanexporter[spans],
https://opentelemetry.io/docs/languages/java/sdk/#logrecordexporter[logs],
and
https://opentelemetry.io/docs/languages/java/sdk/#metricexporter[metrics]),
to manage features like link:index.md#disk-buffering[disk buffering] and
also to establish a connection with the Elastic export endpoint based on
the provided link:#export-connectivity[export connectivity] values. You
can intercept these to add your own logic on top, such as logging each
signal that gets exported, or filtering some items that don't make sense
for you to export.

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .addSpanExporterInterceptor(interceptor)
            .addLogRecordExporterInterceptor(interceptor)
            .addMetricExporterInterceptor(interceptor)
            .build()
    }
}
----

==== Intercepting HTTP spans

This is a convenience tool to intercept HTTP-related spans. By default,
the agent enhances HTTP span names to include domain:port when only an
HTTP verb is set, which is
https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name[often
the case] for HTTP client span names.

You can override this behavior by setting your own interceptor (or you
can choose to set it to `null` to just disable it all).

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .setHttpSpanInterceptor(interceptor)
            .build()
    }
}
----

==== Providing processors

Part of the work that the agent does when configuring the
https://github.com/open-telemetry/opentelemetry-java[OpenTelemetry SDK]
on your behalf, is to provide processors, which are needed to delegate
data to the exporters. For spans, the agent provides a
https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-trace/latest/io/opentelemetry/sdk/trace/export/BatchSpanProcessor.html[BatchSpanProcessor];
for logs, a
https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-logs/latest/io/opentelemetry/sdk/logs/export/BatchLogRecordProcessor.html[BatchLogRecordProcessor];
whereas for metrics, it's a
https://www.javadoc.io/doc/io.opentelemetry/opentelemetry-sdk-metrics/latest/io/opentelemetry/sdk/metrics/export/PeriodicMetricReader.html[PeriodicMetricReader]
(which is analogous to a processor, despite not having that word
included on its name).

In case you wanted to provide your own ones, you can do so by setting a
custom
https://github.com/elastic/apm-agent-android/blob/main/agent-sdk/src/main/java/co/elastic/otel/android/processors/ProcessorFactory.kt[ProcessorFactory],
as shown below. The factory will be called once during initialization
and will need to provide a processor per signal. Each
processor-provider-method within the factory will contain the
pre-configured exporter for that signal as an argument so that it's
included into the processor as its delegate exporter.

[source,kotlin]
----
class MyApp : android.app.Application {

   override fun onCreate() {
      super.onCreate()
      val agent = ElasticApmAgent.builder(this)
         // ...
         .setProcessorFactory(factory)
         .build()
   }
}
----

==== Internal logging policy

[NOTE]
====
Not to be confused with OpenTelemetry's
https://opentelemetry.io/docs/concepts/signals/logs/[log signals]. The
internal logging policy is about the agent's internal logs that you
should see in https://developer.android.com/studio/debug/logcat[logcat]
only.
====

The agent creates logs, by using
https://developer.android.com/reference/android/util/Log[Android's Log]
type, to notify about its internal events so that you can check them out
in https://developer.android.com/studio/debug/logcat[logcat] for
debugging purposes. By default, all of the logs are printed for a
debuggable app build, however, in the case of non-debuggable builds,
only logs at the INFO level and above are printed.

If you would like to show some specific logs from the agent, or even
disable them altogether, you can do so by providing your own
`LoggingPolicy` configuration. The following example shows how to allow
all logs of level WARN and higher to be printed, whereas those below
WARN will be ignored.

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .setInternalLoggingPolicy(LoggingPolicy.enabled(LogLevel.WARN))
            .build()
    }
}
----

=== Dynamic configuration

These are available from an already built
https://github.com/elastic/apm-agent-android/blob/main/agent-sdk/src/main/java/co/elastic/otel/android/ElasticApmAgent.kt[agent].

==== Update export connectivity

You can change any of the configuration values provided as part of the
link:#export-connectivity[export connectivity] setters, at any time, by
setting a new
https://github.com/elastic/apm-agent-android/blob/main/agent-sdk/src/main/java/co/elastic/otel/android/connectivity/ExportEndpointConfiguration.kt[ExportEndpointConfiguration]
object, which will override them all.

[source,kotlin]
----
class MyApp : android.app.Application {

    override fun onCreate() {
        super.onCreate()
        val agent = ElasticApmAgent.builder(this)
            // ...
            .build()
        agent.setExportEndpointConfiguration(configuration)
    }
}
----
