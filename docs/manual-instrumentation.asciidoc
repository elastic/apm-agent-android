[[manual-instrumentation]]
== Manual Instrumentation

preview::[]

The Elastic APM Android Agent automatically instruments <<supported-technologies>>, creating spans for interesting events for each case, and some of those automated spans can be <<configuration,configured>> to better suit different app's needs.
However, if you need to create your own, custom spans, metrics and logs, you can do so by accessing the https://opentelemetry.io/docs/instrumentation/java/manual/[OpenTelemetry Java SDK APIs] that this agent is built on top.

[float]
[[opentelemetry-entrypoint]]
=== OpenTelemetry Entrypoint

After completing the <<setup,setup>> process, the Agent will have configured the OpenTelemetry entrypoint for you and made it globally accessible.
In order to access to the configured OpenTelemetry instance you need to use the `GlobalOpenTelemetry` class as shown below.

[source,java]
----
class MyClass {

    // Example of how to obtain an OpenTelemetry tracer, meter, and logger to create custom Spans, Metrics and Logs.
    public void myMethod() {
        // Span example
        Tracer tracer = GlobalOpenTelemetry.getTracer("my-tracer-scope-name");
        Span span = tracer.spanBuilder("spanName").startSpan();
        //...
        span.end();

        // Metric example
        LongCounter counter = GlobalOpenTelemetry.meterBuilder("meterScope").build().counterBuilder("myCounter").build();
        counter.add(1);

        // Logs example
        Logger logger = GlobalOpenTelemetry.get().getLogsBridge().get("logScope");
        logger.logRecordBuilder().setBody("Log body").emit();
    }
}
----

You can find more details on how to create and customize all kinds of https://opentelemetry.io/docs/concepts/signals/[signals] by following https://opentelemetry.io/docs/languages/java/instrumentation/[OpenTelemetry's Java SDK guide] on manually creating signals.