[[setup]]
== Set up the Agent

[float]
=== Gradle setup

First, add the Elastic APM agent plugin to your application's `build.gradle` file as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    id "com.android.application"
    id "co.elastic.apm.android" version "[latest_version]" <1>
}
----
<1> The Elastic plugin declaration must be added below the Android app plugin declaration (`com.android.application`)
and below the Kotlin plugin declaration (if used).

After adding the agent plugin, configure it.
A minimal configuration sets the Elastic APM Server endpoint as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    //...
    id "co.elastic.apm.android" version "[latest_version]"
}

elasticApm {
    // Minimal configuration
    serverUrl = "https://your.elastic.server"

    // Optional
    serviceName = "your app name" <1>
    serviceVersion = "0.0.0" <2>
    secretToken = "your server auth token" <3>
}
----
<1> Defaults to your `android.defaultConfig.applicationId` value.
<2> Defaults to your `android.defaultConfig.versionName` value.
<3> Defaults to null.

[float]
=== Application setup

After syncing your project with the Gradle changes above, the Elastic APM agent needs to be initialized within your https://developer.android.com/reference/android/app/Application[Application class].
This example shows the simplest way to configure the agent:

[source,java]
----
// Your Application class

class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        ElasticApmAgent.initialize(this); <1>
    }
}
----
<1> Initialize the Elastic APM agent once.

See <<configuration,configuration>> for details on how to tailor the Elastic APM agent to your project's needs.
