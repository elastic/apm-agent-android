---
name: Prepare release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: The release note items to add, in JSON format. See scripts/generate-release-notes/sample.json.
        required: true
        type: string

jobs:
  prepare_release:
    name: Prepare release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Verify prerequisites
        run: |
          if [[ $GITHUB_REF_NAME != main ]]; then
            echo This workflow should only be run against main
            exit 1
          fi

      - name: Get token
        id: get_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.OBS_AUTOMATION_APP_ID }}
          private_key: ${{ secrets.OBS_AUTOMATION_APP_PEM }}
          permissions: >-
            {
              "contents": "write",
              "pull_requests": "write"
            }
          repositories: >-
            ["apm-agent-android"]

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.get_token.outputs.token }}

      - uses: elastic/oblt-actions/git/setup@v1
        with:
          github-token: ${{ steps.get_token.outputs.token }}

      - name: Setting variables
        id: variables
        run: |
          version=$(cat gradle.properties | grep -Po "(?<=version=)\d+\.\d+\.\d+")
          echo "The version is $version"
          { 
            echo "version=$version"
            echo "release_branch=release/$version"
          } >> "$GITHUB_OUTPUT"

      - name: Switching to release branch
        run: |
          if git ls-remote --heads $REMOTE $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "Branch '$RELEASE_BRANCH' exists remotely. Checking out..."
            git switch $RELEASE_BRANCH
            git pull
          else
            echo "Branch '$RELEASE_BRANCH' does not exist remotely. Creating..."
            git checkout -b $RELEASE_BRANCH
            git push -u $REMOTE $RELEASE_BRANCH
          fi
        env:
          REMOTE: "origin"
          RELEASE_BRANCH: ${{ steps.variables.outputs.release_branch }}

      - name: Updating notice files
        run: ./gradlew createNoticeFile

      - name: Updating the release notes
        run: |
          tempdir="build/actions/prepare-release"
          mkdir -p $tempdir
          
          source_file_path=$tempdir/source.json
          dest_file_path=$tempdir/dest.md
          
          echo $RELEASE_NOTES > $source_file_path
          
          ./.github/scripts/generate-release-notes/script.main.kts --source="$source_file_path" --version="$VERSION" > $dest_file_path
          
          echo "Generated notes:"
          cat $dest_file_path
          
          sed -i "/next_release_notes/r $dest_file_path" docs/release-notes/index.md
        env:
          VERSION: ${{ steps.variables.outputs.version }}
          RELEASE_NOTES: ${{ inputs.release_notes }}

      - name: Creating release branch PR
        run: |
          message="Prepare release $VERSION"
          branch="pre-release/$VERSION"
          
          git checkout -b $branch
          git commit -a -m "$message"
          git push --set-upstream origin $branch
          
          echo "About to create PR"
          
          gh pr create --title "[$RELEASE_BRANCH] $message" \
                       --body "$message." \
                       --base $RELEASE_BRANCH
        env:
          GH_TOKEN: ${{ steps.get_token.outputs.token }}
          VERSION: ${{ steps.variables.outputs.version }}
          RELEASE_BRANCH: ${{ steps.variables.outputs.release_branch }}
