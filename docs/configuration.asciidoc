[[configuration]]
== Configuration

[#_gradle_configuration]
=== Gradle configuration

This configuration, already shown in the <<setup,setup>>, allows you to provide values at compile time within your application's `build.gradle` file.

It looks like the following:

[source,groovy]
----
elasticApm {
    // Minimal configuration
    serverUrl = "https://your.elastic.server"

    // Optional
    serviceName = "your app name" // defaults to your 'android.defaultConfig.applicationId' value.
    serviceVersion = "0.0.0" // defaults to your 'android.defaultConfig.versionName` value.
    secretToken = "your server auth token" // defaults to null.
}
----

All of the values provided in the Gradle configuration can be overridden by the following environment variables

|===
|Config |Associated Environment variable

|serviceName
|`ELASTIC_APM_SERVICE_NAME`

|serviceVersion
|`ELASTIC_APM_SERVICE_VERSION`

|serverUrl
|`ELASTIC_APM_SERVER_URL`

|secretToken
|`ELASTIC_APM_SECRET_TOKEN`

|===

=== Runtime configuration

The runtime configuration is provided within your https://developer.android.com/reference/android/app/Application[Application] class at the time of initializing the Elastic agent.
This configuration can override any previously-set compile time configuration.

The way it works is by providing your own instance of the `ElasticApmConfiguration` class as shown below

[source,java]
----
// Application class

class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        ElasticApmAgent.initialize(this, ElasticApmConfiguration.builder().build());
    }
}
----

==== Application id configuration

You can provide your application name and version dynamically by setting those when building your `ElasticApmConfiguration` instance as show below

[source,java]
----
class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        ElasticApmConfiguration configuration = ElasticApmConfiguration.builder()
                .setServiceName("my-custom-name")
                .setServiceVersion("1.0.0")
                .build();
        ElasticApmAgent.initialize(this, configuration);
    }
}
----

==== HTTP Configuration

The agent provides a configuration object for HTTP-related spans named `HttpTraceConfiguration`.
You can pass an instance of it to the `ElasticApmConfiguration` object when initializing the agent in order to customize how the HTTP spans should be handled.

===== Filtering HTTP requests from getting traced

By default, all of your app's HTTP requests will get traced.
You can avoid some requests from getting traced by creating your own `HttpExclusionRule`.
For example this is an exclusion rule that prevents all requests with the host `127.0.0.1` from getting traced:

[source,java]
----
class MyHttpExclusionRule extends HttpExclusionRule {

    @Override
    public boolean exclude(HttpRequest request) {
        return request.url.getHost().equals("127.0.0.1");
    }
}
----

Then you'd need to add it to Elastic's Agent config through its `HttpTraceConfiguration` like so:

[source,java]
----
class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        HttpTraceConfiguration httpConfig = HttpTraceConfiguration.builder()
            .addExclusionRule(new MyHttpExclusionRule())
            .build();
        ElasticApmConfiguration configuration = ElasticApmConfiguration.builder()
                .setHttpTraceConfiguration(httpConfig)
                .build();
        ElasticApmAgent.initialize(this, configuration);
    }
}
----

===== Adding extra attributes to your HTTP requests' spans

If the HTTP span attributes https://github.com/elastic/apm/tree/main/specs/agents/mobile[provided by default] aren't enough, you can attach your own `HttpAttributesVisitor` to add extra params to each HTTP request being traced.
For example:

[source,java]
----
class MyHttpAttributesVisitor implements HttpAttributesVisitor {

    public void visit(AttributesBuilder attrsBuilder, HttpRequest request) {
        attrsBuilder.put("my_custom_attr_key", "my_custom_attr_value");
    }
}
----

Then you'd need to add it to Elastic's Agent config through its `HttpTraceConfiguration` like so:

[source,java]
----
class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        HttpTraceConfiguration httpConfig = HttpTraceConfiguration.builder()
        .addHttpAttributesVisitor(new MyHttpAttributesVisitor())
        .build();
        ElasticApmConfiguration configuration = ElasticApmConfiguration.builder()
                .setHttpTraceConfiguration(httpConfig)
                .build();
        ElasticApmAgent.initialize(this, configuration);
    }
}
----

==== Trace spans attributes notes

There are common attributes that the Elastic Agent gather for every Span, and those are listed https://github.com/elastic/apm/tree/main/specs/agents/mobile[here].

However, due to the nature of Android's OS when it comes to collect some device-related data, some of the above mentioned resources require the Host app (your app) to have some runtime permissions granted.
If their corresponding permissions aren't granted, then they won't be collected and nothing will be sent for those attributes.
Those are the following:

|===
|Attribute |Used in |Requires permission

|`net.host.connection.subtype`
|HTTP Spans
|https://developer.android.com/reference/android/Manifest.permission#READ_PHONE_STATE[READ_PHONE_STATE]

|===

==== Advanced configurable options

The configurable parameters provided by the Elastic agent aim to help configuring common use cases in an easy way, in most of the cases it means to act as a facade between your application and the Open Telemetry Java SDK that this agent is built on top.
If your project requires to configure more advanced aspects of the overall APM processes, you could directly apply that configuration using the https://opentelemetry.io/docs/instrumentation/java/getting-started/[Open Telemetry SDK], which becomes available for you to use within your project by adding the Elastic agent plugin, as explained in <<setup,the agent setup guide>>.
Said configuration will be used by the Elastic agent for the https://opentelemetry.io/docs/concepts/signals/[signals] it sends out of the box.