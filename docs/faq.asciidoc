[[faq]]
== Frequently asked questions

[float]
[[faq-how-does-it-work]]
=== How does the agent work?

The agent auto-instruments known frameworks and libraries and records interesting events, like HTTP requests.
To do this, it leverages the capability of the JVM to instrument the bytecode of classes.
This means that no code changes are required for supported technologies.

The agent automatically and safely injects small pieces of code before and after interesting events to measure their duration and metadata, like HTTP-related information, including the URL, parameters, and headers.

These events, called Spans, are sent to the APM Server which converts them to a format suitable for Elasticsearch, and sends them to an Elasticsearch cluster.
You can then use the APM app in Kibana to gain insight into latency issues and error culprits within your application.

The instrumentation happens at compile time, using the https://developer.android.com/reference/tools/gradle-api/7.2/com/android/build/api/variant/Instrumentation[Android Gradle plugin Instrumentation] API.

[float]
[[faq-bytecode-instrumentation]]
=== Is the agent doing bytecode instrumentation?

Yes

[float]
[[faq-bytecode-instrumentation-safety]]
=== How safe is bytecode instrumentation?

Elastic APM uses the popular bytecode instrumentation library http://bytebuddy.net:[Byte Buddy], which takes care of the heavy lifting of dealing with actual bytecode and lets us write the instrumentation in pure Java.

Byte Buddy is widely used in popular Open Source projects, for example, Hibernate, Jackson, Mockito and is also commonly used by APM vendors.
It is created by a Java Champion, awarded with the Dukes Choice award and currently downloaded over 75 million times a year.

Unlike other bytecode instrumentation libraries, Byte Buddy is designed so that it is impossible to corrupt the bytecode of instrumented classes.
It also respects other transformations applied to your application at the same time.

[float]
[[faq-unsupported-technologies]]
=== What if the agent doesn't support the technologies I'm using?

The agent is built on top of https://opentelemetry.io/docs/instrumentation/java/getting-started/[OpenTelemetry] You can use its public API to create custom spans and transactions.