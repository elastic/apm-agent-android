#!/usr/bin/env bash
##  This script prepares the Vault context and required tooling
##  for the release and snapshot pipelines.
##
##  NOTE: *_SECRET or *_TOKEN env variables are masked, hence if you'd like to avoid any
##        surprises please use the suffix _SECRET or _TOKEN for those values that contain
##        any sensitive data. Buildkite can mask those values automatically

set -eo pipefail

if [[ "$BUILDKITE_COMMAND" =~ .*"upload".* ]]; then
  echo "Skipped pre-command when running the Upload pipeline"
  exit 0
fi

echo "--- Prepare a secure temp :closed_lock_with_key:"
# Prepare a secure temp folder not shared between other jobs to store the key ring
export TMP_WORKSPACE=/tmp/secured
export KEY_FILE=$TMP_WORKSPACE"/private.key"
# Secure home for our keyring
export GNUPGHOME=$TMP_WORKSPACE"/keyring"
mkdir -p $GNUPGHOME
chmod -R 700 $TMP_WORKSPACE
# Make sure we delete this folder before leaving even in case of failure
clean_up () {
  ARG=$?
  echo "--- Deleting tmp workspace"
  rm -rf $TMP_WORKSPACE
  exit $ARG
}
trap clean_up EXIT

echo "--- Prepare keys context :key:"
set +x
# Nexus credentials (they cannot use the _SECRET pattern since they are in-memory based)
# See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
NEXUS_SECRET=kv/ci-shared/release-eng/team-release-secrets/apm/maven_central
ORG_GRADLE_PROJECT_sonatypeUsername=$(vault kv get --field="username" $NEXUS_SECRET)
export ORG_GRADLE_PROJECT_sonatypeUsername
ORG_GRADLE_PROJECT_sonatypePassword=$(vault kv get --field="password" $NEXUS_SECRET)
export ORG_GRADLE_PROJECT_sonatypePassword

# Gradle Plugin portal credentials
GRADLE_SECRET=kv/ci-shared/release-eng/team-release-secrets/apm/gradle_plugin_portal
PLUGIN_PORTAL_KEY=$(vault kv get --field="key" $GRADLE_SECRET)
export PLUGIN_PORTAL_KEY
PLUGIN_PORTAL_SECRET=$(vault kv get --field="secret" $GRADLE_SECRET)
export PLUGIN_PORTAL_SECRET

# Signing keys
GPG_SECRET=kv/ci-shared/release-eng/team-release-secrets/apm/gpg
vault kv get --field="keyring" $GPG_SECRET | base64 -d > $KEY_FILE
## NOTE: passphase is the name of the field.
KEYPASS_SECRET=$(vault kv get --field="passphase" $GPG_SECRET)
export KEYPASS_SECRET
KEY_ID=$(vault kv get --field="key_id" $GPG_SECRET)
KEY_ID_SECRET=${KEY_ID: -8}
export KEY_ID_SECRET

# Import the key into the keyring
echo "$KEYPASS_SECRET" | gpg --batch --import "$KEY_FILE"

# Export secring
SECRING_ASC=$(gpg --pinentry-mode=loopback --passphrase "$KEYPASS_SECRET" --armor --export-secret-key "$KEY_ID_SECRET")
export SECRING_ASC

echo "--- Configure git context :git:"
# Configure the committer since the maven release requires to push changes to GitHub
# This will help with the SLSA requirements.
git config --global user.email "infra-root+apmmachine@elastic.co"
git config --global user.name "apmmachine"

# Configure the java version
JAVA_VERSION=$(cat .java-version | xargs | tr -dc '[:print:]')
JAVA_HOME="${HOME}/.java/openjdk${JAVA_VERSION}"
export JAVA_HOME
PATH="${JAVA_HOME}/bin:$PATH"
export PATH

# Fallback to install at runtime
if [ ! -d "${JAVA_HOME}" ] ; then
  # This should not be the case normally untless the .java-version file has been changed
  # and the VM Image is not yet available with the latest version.
  echo "--- Install JDK${JAVA_VERSION} :java:"
  JAVA_URL=https://jvm-catalog.elastic.co/jdk
  JAVA_PKG="${JAVA_URL}/latest_openjdk_${JAVA_VERSION}_linux.tar.gz"
  curl -L --output /tmp/jdk.tar.gz "${JAVA_PKG}"
  mkdir -p "${JAVA_HOME}"
  tar --extract --file /tmp/jdk.tar.gz --directory "${JAVA_HOME}" --strip-components 1
fi

# Configure the Android SDK
ANDROID_HOME="${PWD}/.android-sdk"
PATH="${PATH}:${ANDROID_HOME}/tools/bin"
export ANDROID_HOME
export PATH

# Fallback to install at runtime
if [ ! -d "${ANDROID_HOME}" ] ; then
  # This should not be the case normally.
  echo "--- Install Android SDK"
  ./install-android-sdk.sh
fi

# Validate java is installed
echo "--- Validate java is installed :java:"
java -version

# Validate Android SDK is installed
echo "--- Validate Android SDK :android:"
sdkmanager --list
