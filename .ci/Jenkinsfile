#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "apm-agent-android"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    HOME= "${env.WORKSPACE}"
    GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        dockerLogin(secret: "${DOCKER_SECRET}", registry: "${DOCKER_REGISTRY}")
        sh(label: 'Init Gradle HOME dir', script: 'mkdir -p ${GRADLE_USER_HOME} && chmod 777 ${GRADLE_USER_HOME}')
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            androidSDK(){
              sh './gradlew lint'
            }
          }
        }
      }
    }
    stage('Build'){
      steps {
        withGithubNotify(context: "Build") {
          dir("${BASE_DIR}"){
            androidSDK(){
              sh './gradlew assemble'
            }
          }
        }
      }
    }
    stage('Test'){
      steps {
        withGithubNotify(context: "Test") {
          dir("${BASE_DIR}"){
            androidSDK(){
              sh './gradlew test && ./gradlew -p "android-test" test'
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}


def androidSDK(Closure body){
  // from https://github.com/docker-android-sdk/android-30
  docker.image("docker.elastic.co/observability-ci/android-sdk:30")
        .withRun('-v "$WORKSPACE:/src" -w "/src" -e HOME="/src" -u "0:$(id -g)"'){ c ->
    body()
  }
}